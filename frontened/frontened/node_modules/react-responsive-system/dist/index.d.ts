import * as React from 'react';
/**
 * A mapping of ScreenClass names to the maximum pixel-width where they apply
 *
 * Of course, your largest breakpoint will not have a maximum pixel-width--pass `Infinity` in order to indicate that there's no maximum.
 * Every instance of ScreenClassBreakpoints should have exactly one ScreenClass with a value of `Infinity`,
 * otherwise very-large screen sizes will manifest as having an `undefined` ScreenClass
 *
 * @example
 * {
 *   xs: 500, // 0 - 500px -> "xs"
 *   sm: 750, // 501 - 750px -> "sm"
 *   md: 1000, // 751 - 1000px -> "md"
 *   lg: Infinity, // 1001+ -> "lg"
 * }
 */
export declare type ScreenClassBreakpoints = {
    [screenClass: string]: number;
};
export declare type ScreenClassConfiguration<B extends ScreenClassBreakpoints> = {
    /**
     * The ScreenClass that should be used if we're unable to determine the size of the window
     * (i.e. when `window` does not exist e.g. during server-side rendering or headless testing)
     *
     * Tip: during testing, use this prop to control the ScreenClass for a given test
     */
    defaultScreenClass: keyof B;
    /**
     * A mapping of ScreenClass names to the maximum pixel-width where they apply
     *
     * @example
     * {
     *   xs: 500,
     *   sm: 750,
     *   md: 1000,
     *   lg: Infinity
     * }
     */
    breakpoints: B;
    /**
     * Controls the way that overrides are applied
     *
     * "no-cascade" -> only apply overrides on the exact screen class
     * "mobile-first" -> override on matching screen class and larger
     * "desktop-first" -> override on matching screen class and smaller
     *
     * @default "no-cascade"
     */
    cascadeMode?: 'no-cascade' | 'mobile-first' | 'desktop-first';
};
export declare type ScreenClass<B extends ScreenClassBreakpoints> = keyof B;
export declare type ResponsiveProps<B extends ScreenClassBreakpoints, P extends {}> = Omit<P, keyof B> & {
    [K in keyof B]?: Partial<P> | ((baseProps: P) => P);
};
export declare function createResponsiveSystem<B extends ScreenClassBreakpoints>(screenClassConfiguration: ScreenClassConfiguration<B>): {
    ScreenClassProvider: React.FC<{}>;
    useResponsiveProps: <P extends {}>(props: ResponsiveProps<B, P>) => P;
    useScreenClass: () => keyof B;
    responsive: {
        <K extends "symbol" | "object" | "big" | "link" | "small" | "sub" | "sup" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "b" | "base" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "keygen" | "label" | "legend" | "li" | "main" | "map" | "mark" | "menu" | "menuitem" | "meta" | "meter" | "nav" | "noindex" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "progress" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "slot" | "script" | "section" | "select" | "source" | "span" | "strong" | "style" | "summary" | "table" | "template" | "tbody" | "td" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "track" | "u" | "ul" | "var" | "video" | "wbr" | "webview" | "svg" | "animate" | "animateMotion" | "animateTransform" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feDropShadow" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "mpath" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(Component: K): React.ForwardRefExoticComponent<ResponsiveProps<B, JSX.IntrinsicElements[K]>>;
        <T extends React.ComponentClass<any, any>>(Component: T): React.ForwardRefExoticComponent<ResponsiveProps<B, React.PropsWithoutRef<React.ComponentProps<T>> & {
            ref?: ((instance: InstanceType<T> | null) => void) | React.RefObject<InstanceType<T>> | null | undefined;
        }>>;
        <P_1 extends {
            ref?: ((instance: any) => void) | React.RefObject<any> | null | undefined;
        }>(Component: React.ForwardRefExoticComponent<P_1>): React.ForwardRefExoticComponent<ResponsiveProps<B, P_1>>;
        <P_2>(Component: React.FunctionComponent<P_2>): React.ForwardRefExoticComponent<ResponsiveProps<B, P_2>>;
    };
};
